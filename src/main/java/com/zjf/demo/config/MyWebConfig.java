package com.zjf.demo.config;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import java.util.logging.Logger;/** * @author zhaojiafeng */public class MyWebConfig implements WebMvcConfigurer {    private static final Logger LOGGER = Logger.getLogger(MyWebConfig.class.getName());    @Override    public void addViewControllers(ViewControllerRegistry registry) {        registry.addViewController("/zxc/foo").setViewName("foo");    }    @Override    public void addInterceptors(InterceptorRegistry registry) {        LOGGER.info("interceptor");        registry.addInterceptor(new MyInterceptor())                .addPathPatterns("/asd/**")                //登录接口不用通过拦截器否则会形成死循环，因为第一次登录没有token信息会一直跳转到登录接口                .excludePathPatterns("/login/verify");    }    @SuppressWarnings({ "rawtypes", "unchecked" })    @Bean    public FilterRegistrationBean filterRegister() {        FilterRegistrationBean frBean = new FilterRegistrationBean();        frBean.setFilter(new MyFilter());        frBean.addUrlPatterns("/*");        System.out.println("filter");        LOGGER.info("filter");        return frBean;    }    @SuppressWarnings({ "rawtypes", "unchecked" })    @Bean    public ServletListenerRegistrationBean listenerRegister() {        ServletListenerRegistrationBean srb = new ServletListenerRegistrationBean();        srb.setListener(new MyListener());        System.out.println("listener");        LOGGER.info("listener");        return srb;    }}