package com.zjf.demo.utils;import com.auth0.jwt.JWT;import com.auth0.jwt.JWTVerifier;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.interfaces.Claim;import com.auth0.jwt.interfaces.DecodedJWT;import com.zjf.demo.admin.Admin;import org.springframework.util.StringUtils;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * @author zhaojiafeng */public class JavaWebTokenUtils {    private static final String SECRET = "JKKLJOoasdlfj";    private static final Long EXPIRE = 5 * 60 * 1000L;    /**     * Algorithm.HMAC256():使用HS256生成token,密钥则是用户的密码，唯一密钥的话可以保存在服务端。     * withAudience()存入需要保存在token的信息，这里我把用户ID存入token中     *     * @param admin 用户     */    public String getToken(Admin admin) {        return JWT.create().withAudience(admin.getAdminId().toString())                .sign(Algorithm.HMAC256(admin.getPassword()));    }    public static String createToken(Long userId) throws Exception {        // header Map        Map<String, Object> map = new HashMap<>();        map.put("alg", "HS256");        map.put("typ", "JWT");        // build token        // param backups {iss:Service, aud:APP}        return JWT.create().withHeader(map) // header                .withClaim("iss", "Service") // payload                .withClaim("aud", "APP").withClaim("user_id", null == userId ? null : userId.toString())                //.withIssuedAt() // sign time                .withExpiresAt(new Date(System.currentTimeMillis() + EXPIRE)) // expire time                .sign(Algorithm.HMAC256(SECRET));    }    private static Map<String, Claim> verifyToken(String token) {        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();        DecodedJWT jwt = verifier.verify(token);        return jwt.getClaims();    }    public static Long getUserId(String token) {        Map<String, Claim> claims = verifyToken(token);        Claim userIdClaim = claims.get("user_id");        if (null == userIdClaim || StringUtils.isEmpty(userIdClaim.asString())) {            // token 校验失败, 抛出Token验证非法异常        }        return Long.valueOf(userIdClaim.asString());    }}